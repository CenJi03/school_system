# Generated by Django 5.1.7 on 2025-04-02 14:32

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "__first__"),  # Using "__first__" to ensure core migrations are applied first
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="StaffMember",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "staff_id",
                    models.CharField(
                        max_length=20, unique=True, verbose_name="Staff ID"
                    ),
                ),
                (
                    "designation",
                    models.CharField(max_length=100, verbose_name="Designation/Title"),
                ),
                (
                    "employment_type",
                    models.CharField(
                        choices=[
                            ("full_time", "Full Time"),
                            ("part_time", "Part Time"),
                            ("contract", "Contract"),
                            ("temporary", "Temporary"),
                            ("intern", "Intern"),
                        ],
                        default="full_time",
                        max_length=20,
                        verbose_name="Employment Type",
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date of Birth"
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("other", "Other"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Gender",
                    ),
                ),
                ("address", models.TextField(blank=True, verbose_name="Address")),
                (
                    "city",
                    models.CharField(blank=True, max_length=100, verbose_name="City"),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="State/Province"
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Country"
                    ),
                ),
                (
                    "postal_code",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="Postal Code"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("on_leave", "On Leave"),
                            ("suspended", "Suspended"),
                            ("terminated", "Terminated"),
                        ],
                        default="active",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                ("joining_date", models.DateField(verbose_name="Joining Date")),
                (
                    "termination_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Termination Date"
                    ),
                ),
                (
                    "salary",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        verbose_name="Base Salary",
                    ),
                ),
                (
                    "emergency_contact_name",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="Emergency Contact Name",
                    ),
                ),
                (
                    "emergency_contact_relationship",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Relationship"
                    ),
                ),
                (
                    "emergency_contact_phone",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        verbose_name="Emergency Contact Phone",
                    ),
                ),
                (
                    "qualifications",
                    models.TextField(blank=True, verbose_name="Qualifications"),
                ),
                ("skills", models.TextField(blank=True, verbose_name="Skills")),
                ("experience", models.TextField(blank=True, verbose_name="Experience")),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "department",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="staff_members",
                        to="core.department",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="staff_members",
                        to="core.school",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Updated By",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="staff_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Staff Member",
                "verbose_name_plural": "Staff Members",
                "ordering": ["staff_id"],
            },
        ),
        migrations.CreateModel(
            name="StaffDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                ("title", models.CharField(max_length=255, verbose_name="Title")),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("contract", "Contract"),
                            ("id", "Identification"),
                            ("resume", "Resume/CV"),
                            ("certificate", "Certificate"),
                            ("evaluation", "Evaluation"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                        verbose_name="Document Type",
                    ),
                ),
                (
                    "file",
                    models.FileField(upload_to="staff_documents/", verbose_name="File"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "is_confidential",
                    models.BooleanField(default=False, verbose_name="Confidential"),
                ),
                (
                    "expiry_date",
                    models.DateField(blank=True, null=True, verbose_name="Expiry Date"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Updated By",
                    ),
                ),
                (
                    "staff_member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="staff.staffmember",
                    ),
                ),
            ],
            options={
                "verbose_name": "Staff Document",
                "verbose_name_plural": "Staff Documents",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Performance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                ("evaluation_date", models.DateField(verbose_name="Evaluation Date")),
                (
                    "teaching_skill",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "Poor"),
                            (2, "Needs Improvement"),
                            (3, "Meets Expectations"),
                            (4, "Exceeds Expectations"),
                            (5, "Outstanding"),
                        ],
                        null=True,
                        verbose_name="Teaching Skill",
                    ),
                ),
                (
                    "classroom_management",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "Poor"),
                            (2, "Needs Improvement"),
                            (3, "Meets Expectations"),
                            (4, "Exceeds Expectations"),
                            (5, "Outstanding"),
                        ],
                        null=True,
                        verbose_name="Classroom Management",
                    ),
                ),
                (
                    "student_engagement",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "Poor"),
                            (2, "Needs Improvement"),
                            (3, "Meets Expectations"),
                            (4, "Exceeds Expectations"),
                            (5, "Outstanding"),
                        ],
                        null=True,
                        verbose_name="Student Engagement",
                    ),
                ),
                (
                    "curriculum_adherence",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "Poor"),
                            (2, "Needs Improvement"),
                            (3, "Meets Expectations"),
                            (4, "Exceeds Expectations"),
                            (5, "Outstanding"),
                        ],
                        null=True,
                        verbose_name="Curriculum Adherence",
                    ),
                ),
                (
                    "punctuality",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "Poor"),
                            (2, "Needs Improvement"),
                            (3, "Meets Expectations"),
                            (4, "Exceeds Expectations"),
                            (5, "Outstanding"),
                        ],
                        null=True,
                        verbose_name="Punctuality",
                    ),
                ),
                (
                    "teamwork",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "Poor"),
                            (2, "Needs Improvement"),
                            (3, "Meets Expectations"),
                            (4, "Exceeds Expectations"),
                            (5, "Outstanding"),
                        ],
                        null=True,
                        verbose_name="Teamwork",
                    ),
                ),
                (
                    "communication",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "Poor"),
                            (2, "Needs Improvement"),
                            (3, "Meets Expectations"),
                            (4, "Exceeds Expectations"),
                            (5, "Outstanding"),
                        ],
                        null=True,
                        verbose_name="Communication",
                    ),
                ),
                (
                    "overall_rating",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Poor"),
                            (2, "Needs Improvement"),
                            (3, "Meets Expectations"),
                            (4, "Exceeds Expectations"),
                            (5, "Outstanding"),
                        ],
                        verbose_name="Overall Rating",
                    ),
                ),
                ("strengths", models.TextField(blank=True, verbose_name="Strengths")),
                (
                    "areas_for_improvement",
                    models.TextField(blank=True, verbose_name="Areas for Improvement"),
                ),
                (
                    "goals",
                    models.TextField(blank=True, verbose_name="Goals for Next Period"),
                ),
                (
                    "comments",
                    models.TextField(blank=True, verbose_name="Additional Comments"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "evaluator",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="conducted_evaluations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Updated By",
                    ),
                ),
                (
                    "staff_member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="performances",
                        to="staff.staffmember",
                    ),
                ),
            ],
            options={
                "verbose_name": "Performance Evaluation",
                "verbose_name_plural": "Performance Evaluations",
                "ordering": ["-evaluation_date"],
            },
        ),
        migrations.CreateModel(
            name="Leave",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "leave_type",
                    models.CharField(
                        choices=[
                            ("annual", "Annual Leave"),
                            ("sick", "Sick Leave"),
                            ("unpaid", "Unpaid Leave"),
                            ("maternity", "Maternity Leave"),
                            ("paternity", "Paternity Leave"),
                            ("bereavement", "Bereavement Leave"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                        verbose_name="Leave Type",
                    ),
                ),
                ("start_date", models.DateField(verbose_name="Start Date")),
                ("end_date", models.DateField(verbose_name="End Date")),
                ("reason", models.TextField(blank=True, verbose_name="Reason")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "approved_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Approved Date"
                    ),
                ),
                (
                    "rejection_reason",
                    models.TextField(blank=True, verbose_name="Rejection Reason"),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_leaves",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Updated By",
                    ),
                ),
                (
                    "staff_member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="leaves",
                        to="staff.staffmember",
                    ),
                ),
            ],
            options={
                "verbose_name": "Leave",
                "verbose_name_plural": "Leaves",
                "ordering": ["-start_date"],
            },
        ),
        migrations.CreateModel(
            name="TeacherProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                ("subjects", models.JSONField(default=list, verbose_name="Subjects")),
                (
                    "preferred_levels",
                    models.JSONField(
                        default=list, verbose_name="Preferred Teaching Levels"
                    ),
                ),
                (
                    "max_hours_per_week",
                    models.PositiveIntegerField(
                        default=40, verbose_name="Maximum Hours per Week"
                    ),
                ),
                (
                    "certifications",
                    models.JSONField(default=list, verbose_name="Certifications"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "staff_member",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teacher_profile",
                        to="staff.staffmember",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Updated By",
                    ),
                ),
            ],
            options={
                "verbose_name": "Teacher Profile",
                "verbose_name_plural": "Teacher Profiles",
            },
        ),
    ]
